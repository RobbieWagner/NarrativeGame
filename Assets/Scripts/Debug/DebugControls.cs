//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Debug/DebugControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DebugControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DebugControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebugControls"",
    ""maps"": [
        {
            ""name"": ""Debug"",
            ""id"": ""7094b1e2-fb25-4508-bf37-fbce1c3b4d90"",
            ""actions"": [
                {
                    ""name"": ""DebugHold"",
                    ""type"": ""Button"",
                    ""id"": ""241531f6-8b0d-4b9f-ae22-52197cb32dcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TerminateCombat"",
                    ""type"": ""Button"",
                    ""id"": ""8e6548a3-247d-4fcd-9985-235cff5142b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""776a8629-2cb8-43a9-b8bc-7deeed50cd2d"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40ab45b6-69c9-4833-a941-d688ba0f6fd3"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TerminateCombat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_DebugHold = m_Debug.FindAction("DebugHold", throwIfNotFound: true);
        m_Debug_TerminateCombat = m_Debug.FindAction("TerminateCombat", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Debug
    private readonly InputActionMap m_Debug;
    private List<IDebugActions> m_DebugActionsCallbackInterfaces = new List<IDebugActions>();
    private readonly InputAction m_Debug_DebugHold;
    private readonly InputAction m_Debug_TerminateCombat;
    public struct DebugActions
    {
        private @DebugControls m_Wrapper;
        public DebugActions(@DebugControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DebugHold => m_Wrapper.m_Debug_DebugHold;
        public InputAction @TerminateCombat => m_Wrapper.m_Debug_TerminateCombat;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsCallbackInterfaces.Add(instance);
            @DebugHold.started += instance.OnDebugHold;
            @DebugHold.performed += instance.OnDebugHold;
            @DebugHold.canceled += instance.OnDebugHold;
            @TerminateCombat.started += instance.OnTerminateCombat;
            @TerminateCombat.performed += instance.OnTerminateCombat;
            @TerminateCombat.canceled += instance.OnTerminateCombat;
        }

        private void UnregisterCallbacks(IDebugActions instance)
        {
            @DebugHold.started -= instance.OnDebugHold;
            @DebugHold.performed -= instance.OnDebugHold;
            @DebugHold.canceled -= instance.OnDebugHold;
            @TerminateCombat.started -= instance.OnTerminateCombat;
            @TerminateCombat.performed -= instance.OnTerminateCombat;
            @TerminateCombat.canceled -= instance.OnTerminateCombat;
        }

        public void RemoveCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IDebugActions
    {
        void OnDebugHold(InputAction.CallbackContext context);
        void OnTerminateCombat(InputAction.CallbackContext context);
    }
}
